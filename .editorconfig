#############################
# Core EditorConfig Options #
#############################

# top-most EditorConfig file
root = true

# All files | Don't use tabs for indentation.
[*]
indent_style = space

# Code files
[*.{cs,csx,vb,vbx}]
file_header_template = Copyright (c) .NET Foundation. All rights reserved.\r\nLicensed under the MIT License. See LICENSE in the project root for license information.
xml_header = false
indent_size = 4
insert_final_newline = true
trim_trailing_whitespace = true
charset = utf-8-bom

#############################
# Script Coding Conventions #
#############################

[*.xaml]
indent_size = 4

[*.ps1]
indent_size = 2

# Xml project files
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]
indent_size = 2

# Xml config files
[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]
indent_size = 2

# JSON files
[*.json]
indent_size = 2

[*.groovy]
indent_size = 2

#############################
# .NET Coding Conventions   #
#############################

[*.{cs,vb}]

rulers = 120 # .editorconfig upcoming format.
guidelines = 120 # https://marketplace.visualstudio.com/items?itemName=PaulHarrington.EditorGuidelines

# Sort using and Import directives with System.* appearing first
dotnet_sort_system_directives_first = true
dotnet_style_require_accessibility_modifiers = always:error

# Put a blank line between System.* and Microsoft.*
dotnet_separate_import_directive_groups = false

# Avoid "this." and "Me." if not necessary
dotnet_style_qualification_for_field = false:error
dotnet_style_qualification_for_property = false:error
dotnet_style_qualification_for_method = false:error
dotnet_style_qualification_for_event = false:error

# Use language keywords instead of framework type names for type references
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion
dotnet_style_predefined_type_for_member_access = true:suggestion

# Prefer read-only on fields
dotnet_style_readonly_field = true:error

# Expression-level preferences
dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_null_propagation = true:suggestion
dotnet_style_explicit_tuple_names = true:suggestion
dotnet_style_prefer_inferred_tuple_names = true:suggestion
dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion
dotnet_style_prefer_conditional_expression_over_return = false
dotnet_style_prefer_conditional_expression_over_assignment = false
dotnet_style_prefer_auto_properties = false

#############################
# Naming Conventions        #
#############################

dotnet_naming_rule.interfaces_must_be_pascal_cased_and_prefixed_with_I.symbols                        = interface_symbols
dotnet_naming_rule.interfaces_must_be_pascal_cased_and_prefixed_with_I.style                          = pascal_case_and_prefix_with_I_style
dotnet_naming_rule.interfaces_must_be_pascal_cased_and_prefixed_with_I.severity                       = error

dotnet_naming_rule.externally_visible_members_must_be_pascal_cased.symbols                            = externally_visible_symbols
dotnet_naming_rule.externally_visible_members_must_be_pascal_cased.style                              = pascal_case_style
dotnet_naming_rule.externally_visible_members_must_be_pascal_cased.severity                           = error

dotnet_naming_rule.parameters_must_be_camel_cased.symbols                                             = parameter_symbols
dotnet_naming_rule.parameters_must_be_camel_cased.style                                               = camel_case_style
dotnet_naming_rule.parameters_must_be_camel_cased.severity                                            = error

dotnet_naming_rule.constants_must_be_pascal_cased.symbols                                             = constant_symbols
dotnet_naming_rule.constants_must_be_pascal_cased.style                                               = pascal_case_style
dotnet_naming_rule.constants_must_be_pascal_cased.severity                                            = error

dotnet_naming_rule.private_instance_fields_must_be_camel_cased_and_prefixed_with_underscore.symbols   = private_field_symbols
dotnet_naming_rule.private_instance_fields_must_be_camel_cased_and_prefixed_with_underscore.style     = camel_case_and_prefix_with_underscore_style
dotnet_naming_rule.private_instance_fields_must_be_camel_cased_and_prefixed_with_underscore.severity  = error

# Symbols
dotnet_naming_symbols.externally_visible_symbols.applicable_kinds                                     = class,struct,interface,enum,property,method,field,event,delegate
dotnet_naming_symbols.externally_visible_symbols.applicable_accessibilities                           = public,internal,friend,protected,protected_internal,protected_friend,private_protected

dotnet_naming_symbols.interface_symbols.applicable_kinds                                              = interface
dotnet_naming_symbols.interface_symbols.applicable_accessibilities                                    = *

dotnet_naming_symbols.parameter_symbols.applicable_kinds                                              = parameter
dotnet_naming_symbols.parameter_symbols.applicable_accessibilities                                    = *

dotnet_naming_symbols.constant_symbols.applicable_kinds                                               = field
dotnet_naming_symbols.constant_symbols.required_modifiers                                             = const
dotnet_naming_symbols.constant_symbols.applicable_accessibilities                                     = *

dotnet_naming_symbols.private_static_field_symbols.applicable_kinds                                   = field
dotnet_naming_symbols.private_static_field_symbols.required_modifiers                                 = static,shared
dotnet_naming_symbols.private_static_field_symbols.applicable_accessibilities                         = private

dotnet_naming_symbols.private_field_symbols.applicable_kinds                                          = field
dotnet_naming_symbols.private_field_symbols.applicable_accessibilities                                = private

# Styles
dotnet_naming_style.camel_case_style.capitalization                                                   = camel_case
dotnet_naming_style.pascal_case_style.capitalization                                                  = pascal_case

dotnet_naming_style.camel_case_and_prefix_with_s_underscore_style.required_prefix                     = s_
dotnet_naming_style.camel_case_and_prefix_with_s_underscore_style.capitalization                      = camel_case

dotnet_naming_style.camel_case_and_prefix_with_underscore_style.required_prefix                       = _
dotnet_naming_style.camel_case_and_prefix_with_underscore_style.capitalization                        = camel_case

dotnet_naming_style.pascal_case_and_prefix_with_I_style.required_prefix                               = I
dotnet_naming_style.pascal_case_and_prefix_with_I_style.capitalization                                = pascal_case

#############################
# C# Code Style Rules       #
#############################

[*.cs]

# Modifier preferences
csharp_preferred_modifier_order = public,private,protected,internal,file,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,required,volatile,async:warning

# Prefer "var" only when the type is apparent
csharp_style_var_for_built_in_types = false:suggestion
csharp_style_var_when_type_is_apparent = true:suggestion
csharp_style_var_elsewhere = false:suggestion

# Prefer method-like constructs to have a block body
csharp_style_expression_bodied_methods = false:none
csharp_style_expression_bodied_constructors = false:none
csharp_style_expression_bodied_operators = false:none

# Prefer property-like constructs to have an expression-body
csharp_style_expression_bodied_properties = true:none
csharp_style_expression_bodied_indexers = true:none
csharp_style_expression_bodied_accessors = true:none

# Suggest more modern language features when available
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion
csharp_style_inlined_variable_declaration = true:suggestion
csharp_style_throw_expression = true:suggestion
csharp_style_conditional_delegate_call = true:suggestion
csharp_style_deconstructed_variable_declaration = true:suggestion

# 'using' directive preferences
csharp_using_directive_placement = outside_namespace:warning

#############################
# C# Formatting Rules       #
#############################

# New line preferences
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

# Identation preferences
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = false
csharp_indent_switch_labels = true
csharp_indent_labels = one_less_than_current
csharp_indent_block_contents = true
csharp_indent_braces = false

# Spacing preferences
csharp_space_after_cast = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_parentheses = false
csharp_space_between_square_brackets = false
csharp_space_between_empty_square_brackets = false
csharp_space_before_open_square_brackets = false
csharp_space_around_declaration_statements = false
csharp_space_around_binary_operators = before_and_after
csharp_space_after_cast = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_before_dot = false
csharp_space_after_dot = false
csharp_space_before_comma = false
csharp_space_after_comma = true
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_semicolon_in_for_statement = true

# Wrapping preferences
csharp_preserve_single_line_statements = true
csharp_preserve_single_line_blocks = true

# Code block preferences
csharp_prefer_braces = false:none

#############################
# .NET Diagnostic Rules     #
#############################

# Analyzers
dotnet_diagnostic.SA1101.severity = none # Prefix local calls with this
dotnet_diagnostic.SA1127.severity = none # Generic type constraints should be on their own line
dotnet_diagnostic.SA1204.severity = none # Static elements should appear before instance elements
dotnet_diagnostic.SA1309.severity = none # Field names should not begin with underscore
dotnet_diagnostic.SA1413.severity = none # Use trailing comma in multi-line initializers
dotnet_diagnostic.SA1600.severity = none # Elements should be documented
dotnet_diagnostic.SA1601.severity = none # Partial elements should be documented
dotnet_diagnostic.SA1602.severity = none # Enumeration items should be documented

# Temporary supression until we refactor the code
dotnet_diagnostic.SA1202.severity = none # Elements should be ordered by access modifier
dotnet_diagnostic.SA1402.severity = none # File may only contain a single type

# FxCop

# Design rules
dotnet_diagnostic.CA1002.severity = none  # Do not expose generic lists
dotnet_diagnostic.CA1014.severity = none  # Mark assemblies with CLSCompliantAttribute
dotnet_diagnostic.CA1030.severity = none  # Use events where appropriate
dotnet_diagnostic.CA1034.severity = none  # Nested types should not be visible
dotnet_diagnostic.CA1054.severity = none  # URI parameters should not be strings
dotnet_diagnostic.CA1056.severity = none  # URI properties should not be strings

# Globalization rules
dotnet_diagnostic.CA1303.severity = none # Do not pass literals as localized parameters

# Maintainability rules
dotnet_diagnostic.CA1508.severity = none # Avoid dead conditional code

# Naming rules
dotnet_diagnostic.CA1707.severity = none # Identifiers should not contain underscores
dotnet_diagnostic.CA1716.severity = none # Identifiers should not match keywords

# Performance rules
dotnet_diagnostic.CA1802.severity = none # Use Literals Where Appropriate
dotnet_diagnostic.CA1810.severity = none # Initialize reference type static fields inline
dotnet_diagnostic.CA1812.severity = none # Avoid uninstantiated internal classes
dotnet_diagnostic.CA1820.severity = none # Test for empty strings using string length

# Reliability rules
dotnet_diagnostic.CA2007.severity = none # Consider calling ConfigureAwait on the awaited task

# Security rules
dotnet_diagnostic.CA2326.severity = none # Do not use TypeNameHandling values other than None
dotnet_diagnostic.CA2327.severity = none # Do not use insecure JsonSerializerSettings

# IDE
dotnet_diagnostic.IDE0005.severity = warning # Using directive is unnecessary
dotnet_diagnostic.IDE1006.severity = warning # Predefined type alias should not be used

#############################
# Test Rules                #
#############################

[**/*Tests/**/*.cs]
# We allow usage of "var" inside tests as it reduces churn as we remove/rename types
csharp_style_var_for_built_in_types = true:none
csharp_style_var_elsewhere = true:none

[**/test/**/*.cs]
# We allow usage of "var" inside tests as it reduces churn as we remove/rename types
csharp_style_var_for_built_in_types = true:none
csharp_style_var_elsewhere = true:none

[**/generated/**/*.cs]
dotnet_analyzer_diagnostic.severity = none