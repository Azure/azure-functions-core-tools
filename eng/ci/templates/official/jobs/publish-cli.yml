parameters:
  - name: runtime
    type: string
  - name: jobNameSuffix
    type: string

jobs:
- job: Publish_${{ parameters.jobNameSuffix }}
  displayName: 'Publish ${{ parameters.runtime }}'
  timeoutInMinutes: "180"

  pool:
    name: 1es-pool-azfunc-public
    image: 1es-windows-2022
    os: windows

  variables:
  - template: /eng/ci/templates/official/variables/authenticode-binaries-tosign.yml@self
  - template: /eng/ci/templates/official/variables/thirdparty-binaries-tosign.yml@self

  steps:
  - template: /eng/ci/templates/official/steps/prebuild-common.yml@self

  - pwsh: |
      $runtime = "${{ parameters.runtime }}"
      if ($runtime.StartsWith('min')) {
          $isMinified = '/p:IsMinified=true'
          $runtime = $runtime -replace '^min\.?', ''
      } else {
          $isMinified = ''
      }

      dotnet publish src/Cli/func/Azure.Functions.Cli.csproj `
        -o "$(Build.Repository.LocalPath)/artifacts/${{ parameters.runtime }}" `
        -c Release `
        -f net8.0 `
        -r $runtime `
        --self-contained `
        --no-restore `
         $isMinified `
         /p:TelemetryInstrumentationKey="$(TELEMETRY_INSTRUMENTATION_KEY)"
    displayName: 'Build & publish CLI (${{ parameters.runtime }})'
    env:
      TELEMETRY_INSTRUMENTATION_KEY: $(TELEMETRY_INSTRUMENTATION_KEY)

  - template: /eng/ci/templates/official/steps/sign-authenticode.yml@self
    parameters:
      folderPath: '$(Build.Repository.LocalPath)/artifacts/${{ parameters.runtime }}'
      signPatterns: $(authenticodeBinariesToSign)

  - template: /eng/ci/templates/official/steps/sign-thirdparty.yml@self
    parameters:
      folderPath: '$(Build.Repository.LocalPath)/artifacts/${{ parameters.runtime }}'
      signPatterns: $(thirdPartyBinariesToSign)

  - task: ArchiveFiles@2
    displayName: 'Zip CLI (${{ parameters.runtime }})'
    inputs:
      rootFolderOrFile: '$(Build.Repository.LocalPath)/artifacts/${{ parameters.runtime }}'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.Repository.LocalPath)/artifacts/Azure.Functions.Cli.${{ parameters.runtime }}.$(Build.BuildNumber).zip'

  - ${{ if contains(parameters.runtime, 'osx') }}:
    - template: /eng/ci/templates/official/steps/sign-mac.yml@self
      parameters:
        folderPath: '$(Build.Repository.LocalPath)/artifacts'
        signPatterns: '*.osx-*.zip'

  - ${{ if contains(parameters.runtime, 'linux') }}:
    - template: /eng/ci/templates/official/steps/sign-linux.yml@self
      parameters:
        folderPath: '$(Build.Repository.LocalPath)/artifacts'
        signPatterns: 'func,gozip'

  # arm64 MSI signing is not supported yet, so we skip it for now. We also do not generate MSI for .min versions.
  - ${{ if startsWith(parameters.runtime, 'win-x') }}:
    - pwsh: >
        ./eng/scripts/generate-msi-files.ps1
        -artifactsPath "$(Build.Repository.LocalPath)/artifacts"
        -runtime "${{ parameters.runtime }}"
        -cliVersion "$(Build.BuildNumber)"
      displayName: 'Generate MSI files'

    - template: /eng/ci/templates/official/steps/sign-msi.yml@self
      parameters:
        folderPath: '$(Build.Repository.LocalPath)/artifacts'

  - pwsh: ./eng/scripts/generate-sha-files.ps1 -artifactsPath '$(Build.Repository.LocalPath)/artifacts'
    displayName: 'Generate .sha files'

  - pwsh: |
      $msiFiles = Get-ChildItem -Path '$(Build.Repository.LocalPath)/artifacts/func-cli*.msi' -ErrorAction SilentlyContinue
      if ($msiFiles) {
        Write-Host "Moving MSI files to ArtifactStagingDirectory: $($msiFiles.FullName)"
        Move-Item -Path $msiFiles.FullName -Destination '$(Build.ArtifactStagingDirectory)'
      }

      $funcZips = Get-ChildItem -Path '$(Build.Repository.LocalPath)/artifacts/Azure.Functions.Cli.*' -ErrorAction SilentlyContinue
      if ($funcZips) {
        Write-Host "Moving func zips to ArtifactStagingDirectory: $($funcZips.FullName)"
        Move-Item -Path $funcZips.FullName -Destination '$(Build.ArtifactStagingDirectory)'
      }
    displayName: 'Move artifacts to ArtifactStagingDirectory'

  - task: 1ES.PublishPipelineArtifact@1
    condition: succeeded()
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'func-cli-${{ parameters.runtime }}'
      artifactType: 'pipeline'
