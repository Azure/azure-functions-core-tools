parameters:
  - name: runtime
    type: string
  - name: jobNameSuffix
    type: string

jobs:
- job: Publish_${{ parameters.jobNameSuffix }}
  displayName: 'Publish ${{ parameters.runtime }}'
  timeoutInMinutes: "180"

  pool:
    name: 1es-pool-azfunc-public
    image: 1es-windows-2022
    os: windows

  variables:
  - template: /eng/ci/templates/official/variables/authenticode-binaries-tosign.yml@self
  - template: /eng/ci/templates/official/variables/thirdparty-binaries-tosign.yml@self
  - template: /eng/ci/templates/official/variables/mac-binaries-tosign.yml@self

  steps:
  - ${{ if eq(variables['Build.Reason'], 'Schedule') }}:
    - pwsh: |
        # Check if this is a scheduled build
        Write-Host "##vso[build.addbuildtag]nightly-build"
      displayName: 'Add build tag for scheduled builds'

  - template: /eng/ci/templates/steps/install-tools.yml@self

  - task: AzureCLI@2
    displayName: Acquire access token
    inputs:
      azureSubscription: $(E2ETestServiceConnectionName)
      scriptType: ps
      scriptLocation: inlineScript
      signType: inline
      inlineScript: |
        # acquire access token from Azure CLI and export it to AZURE_MANAGEMENT_ACCESS_TOKEN
        $accessToken = (az account get-access-token --query "accessToken" | % { $_.Trim('"') })
        echo "##vso[task.setvariable variable=azure_management_access_token]$accessToken"

  - template: /eng/ci/templates/steps/restore-nuget.yml@self

  - pwsh: ./eng/scripts/validateWorkerVersions.ps1
    displayName: 'Validate worker versions'
    condition: ne(variables['skipWorkerVersionValidation'], 'true')

  - pwsh: ./eng/scripts/check-vulnerabilities.ps1
    displayName: "Check for security vulnerabilities"

  - pwsh: |
      $runtime = "${{ parameters.runtime }}"
      if ($runtime.StartsWith('min')) {
          $isMinified = '/p:IsMinified=true'
          $runtime = $runtime -replace '^min\.?', ''
      } else {
          $isMinified = ''
      }

      dotnet build src/Cli/func/Azure.Functions.Cli.csproj `
        -c Release `
        -f net8.0 `
        -r $runtime `
        --self-contained `
        --no-restore `
         $isMinified `
         /p:TelemetryInstrumentationKey="$(TELEMETRY_INSTRUMENTATION_KEY)"
    displayName: 'Build CLI (${{ parameters.runtime }})'
    env:
      TELEMETRY_INSTRUMENTATION_KEY: $(TELEMETRY_INSTRUMENTATION_KEY)

  - template: /eng/ci/templates/official/steps/sign-authenticode.yml@self
    parameters:
      folderPath: '$(Build.Repository.LocalPath)/out/bin/Azure.Functions.Cli'
      signPatterns: $(authenticodeBinariesToSign)

  - template: /eng/ci/templates/official/steps/sign-thirdparty.yml@self
    parameters:
      folderPath: '$(Build.Repository.LocalPath)/out/bin/Azure.Functions.Cli'
      signPatterns: $(thirdPartyBinariesToSign)

  - pwsh: |
      $runtime = "${{ parameters.runtime }}"
      if ($runtime.StartsWith('min')) {
          $isMinified = '/p:IsMinified=true'
          $runtime = $runtime -replace '^min\.?', ''
      } else {
          $isMinified = ''
      }

      dotnet publish src/Cli/func/Azure.Functions.Cli.csproj `
        -o "$(Build.Repository.LocalPath)/artifacts/$runtime" `
        -c Release `
        -f net8.0 `
        -r $runtime `
        --self-contained `
        --no-build `
        /p:ZipAfterPublish=true `
        /p:ZipArtifactsPath="$(Build.Repository.LocalPath)/artifacts" `
        $isMinified
    displayName: 'Publish & Zip CLI'

  - ${{ if contains(parameters.runtime, 'osx') }}:
    - template: /eng/ci/templates/official/steps/sign-mac.yml@self
      parameters:
        folderPath: '$(Build.Repository.LocalPath)/artifacts'
        signPatterns: '*.osx-*.zip'

  # arm64 MSI signing is not supported yet, so we skip it for now.
  - ${{ if and(contains(parameters.runtime, 'win'), not(contains(parameters.runtime, 'arm64'))) }}:
    - template: /eng/ci/templates/official/steps/generate-sign-msi.yml@self
      parameters:
        folderPath: '$(Build.Repository.LocalPath)/artifacts'
        runtime: '${{ parameters.runtime }}'

  - pwsh: ./eng/scripts/generateSha.ps1 -artifactsPath '$(Build.Repository.LocalPath)/artifacts'
    displayName: 'Generate sha files'

  - pwsh: |
      $msiFiles = Get-ChildItem -Path '$(Build.Repository.LocalPath)/artifacts/func-cli*.msi' -ErrorAction SilentlyContinue
      if ($msiFiles) {
        Move-Item -Path $msiFiles.FullName -Destination '$(Build.ArtifactStagingDirectory)'
      }

      $funcZips = Get-ChildItem -Path '$(Build.Repository.LocalPath)/artifacts/func.*' -ErrorAction SilentlyContinue
      if ($funcZips) {
        Move-Item -Path $funcZips.FullName -Destination '$(Build.ArtifactStagingDirectory)'
      }
    displayName: 'Move artifacts to ArtifactStagingDirectory'

  - task: 1ES.PublishPipelineArtifact@1
    condition: succeeded()
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'func-cli-${{ parameters.runtime }}'
      artifactType: 'pipeline'
