jobs:
- job: LinuxPackage
  timeoutInMinutes: "120"

  pool:
    name: 1es-pool-azfunc
    image: 1es-ubuntu-22.04
    os: linux

  variables:
    drop_path: $(Build.ArtifactStagingDirectory)
    pkg_drop_path: $(drop_path)/drop_debian

  templateContext:
    inputs:
    - input: pipelineArtifact
      pipeline: core-tools-consolidated-artifacts
      artifactName: func-cli-metadata-json
      targetPath: $(Pipeline.Workspace)/release-metadata

    outputParentDirectory: $(drop_path)
    outputs:
    - output: pipelineArtifact
      displayName: Publish debian package
      path: $(pkg_drop_path)
      artifact: drop_debian

  steps:
  - script: |
      sudo apt-get update
      sudo apt-get install -y binutils-aarch64-linux-gnu
      sudo apt-get install -y fakeroot
    displayName: 'Install required tools'

  - task: PowerShell@2
    displayName: 'Read metadata from consolidated build'
    inputs:
      targetType: 'inline'
      script: |
        $metadataPath = "$(Pipeline.Workspace)/release-metadata/metadata.json"
        Write-Host "Reading metadata from $metadataPath"
        $metadata = Get-Content -Path $metadataPath | ConvertFrom-Json
        Write-Host "Consolidated Build ID: $($metadata.consolidatedBuildId)"
        Write-Host "Default Artifact Version: $($metadata.defaultArtifactVersion)"

        # Set as pipeline variables for later steps
        Write-Host "##vso[task.setvariable variable=ConsolidatedBuildId]$($metadata.consolidatedBuildId)"
        Write-Host "##vso[task.setvariable variable=DefaultArtifactVersion]$($metadata.defaultArtifactVersion)"

        # Set version as the build number
        Write-Host "##vso[build.updatebuildnumber]$($metadata.defaultArtifactVersion)"

  - task: Bash@3
    displayName: 'Build DEB package'
    failOnStderr: true
    inputs:
      targetType: 'inline'
      script: |
        set -euo pipefail
        cd eng/tools/publish-tools
        python3 -m venv publish-env
        source publish-env/bin/activate

        pip install -r requirements.txt
        pip install wget

        major_version=$(echo "$linuxBuildNumber" | cut -d'.' -f1)
        python driver.py "$linuxBuildNumber" "$consolidatedBuildId" "$major_version"
        python driver.py "$linuxBuildNumber" "$consolidatedBuildId"

        export DEB_PACKAGE="$(readlink -f artifact/*$RELEASE_VERSION*)"
        echo "${DEB_PACKAGE}"
      bashEnvValue: '~/.profile'  # Set value for BASH_ENV environment variable
    env:
      linuxBuildNumber: $(DefaultArtifactVersion)
      consolidatedBuildId: $(ConsolidatedBuildId)

  - template: ci/sign-files.yml@eng
    parameters:
      displayName: 'Sign'
      folderPath: '/mnt/vss/_work/1/s/eng/tools/publish-tools/artifact'
      pattern: '*.deb'
      signType: inline
      inlineOperation: |
        [
          {
            "keyCode": "CP-450779-Pgp",
            "operationSetCode": "LinuxSign",
            "parameters": [],
            "toolName": "signtool.exe",
            "toolVersion": "1.0"
          }
        ]

  - pwsh: |
      echo $env:LinuxPackageAccountName
      $buildTag = $env:LinuxPackageBuildTag
      $majorVersion = [math]::Floor([double]$buildTag.Split(".")[0])

      # Convert to Debian version format
      if ($buildTag -like "*-*") {
        $parts = $buildTag -split "-"
        $debianVersion = "$($parts[0])~$($parts[1])-1"
      } else {
        $debianVersion = "$buildTag-1"
      }

      foreach ($arch in @("x64", "arm64")) {
        $fileName = "azure-functions-core-tools_${debianVersion}_${arch}.deb"
        $filePath = "/mnt/vss/_work/1/s/eng/tools/publish-tools/artifact/$fileName"
        az storage blob upload -f $filePath -c signed -n $fileName --account-name $env:LinuxPackageAccountName --account-key $env:LinuxPackageAccountKey

        $fileNameMajor = "azure-functions-core-tools-$($majorVersion)_${debianVersion}_${arch}.deb"
        $filePathMajor = "/mnt/vss/_work/1/s/eng/tools/publish-tools/artifact/$fileNameMajor"
        az storage blob upload -f $filePathMajor -c signed -n $fileNameMajor --account-name $env:LinuxPackageAccountName --account-key $env:LinuxPackageAccountKey
      }
    env:
      LinuxPackageAccountName: $(LinuxPackageAccountName)
      LinuxPackageAccountKey: $(LinuxPackageAccountKey)
      LinuxPackageBuildTag: $(DefaultArtifactVersion)
    displayName: 'Upload Core Tools Signed Linux Package to the storage'
    condition: eq(variables['UploadSignedPackages'], 'true') # This is a UI variable that defaults to false

  - task: Bash@3
    displayName: 'Copy DEB package to drop'
    inputs:
      targetType: 'inline'
      script: |
        mkdir -p $drop
        cp -r /mnt/vss/_work/1/s/eng/tools/publish-tools/artifact/* $drop
    env:
      drop: $(pkg_drop_path)
