jobs:
- job: Build_CLI
  timeoutInMinutes: "180"

  pool:
    name: 1es-pool-azfunc-public
    image: 1es-windows-2022
    os: windows

  variables:
  - template: /eng/ci/templates/official/variables/authenticode-binaries-tosign.yml@self
  - template: /eng/ci/templates/official/variables/thirdparty-binaries-tosign.yml@self
  - template: /eng/ci/templates/official/variables/mac-binaries-tosign.yml@self

  steps:
  - ${{ if eq(variables['Build.Reason'], 'Schedule') }}:
    - pwsh: |
        # Check if this is a scheduled build
        Write-Host "##vso[build.addbuildtag]nightly-build"
      displayName: 'Add build tag for scheduled builds'

  - template: /eng/ci/templates/steps/install-tools.yml@self

  - pwsh: |
      $isIntegrationBuild = $false
      if ($env:INTEGRATIONBUILDNUMBER -like "PreRelease*-*")
      {
          $isIntegrationBuild = $true
      }
      Write-Host "##vso[task.setvariable variable=IsIntegrationBuild]$isIntegrationBuild"
      Write-Host "IsIntegrationBuild: $isIntegrationBuild"
    displayName: 'Set IsIntegrationBuild variable'

  - task: AzureCLI@2
    displayName: Acquire access token
    inputs:
      azureSubscription: $(E2ETestServiceConnectionName)
      scriptType: ps
      scriptLocation: inlineScript
      signType: inline
      inlineScript: |
        # acquire access token from Azure CLI and export it to AZURE_MANAGEMENT_ACCESS_TOKEN
        $accessToken = (az account get-access-token --query "accessToken" | % { $_.Trim('"') })
        echo "##vso[task.setvariable variable=azure_management_access_token]$accessToken"

  - template: /eng/ci/templates/steps/restore-nuget.yml@self

  - pwsh: ./eng/scripts/validateWorkerVersions.ps1
    displayName: 'Validate worker versions'
    condition: ne(variables['skipWorkerVersionValidation'], 'true')

  - pwsh: ./eng/scripts/check-vulnerabilities.ps1
    displayName: "Check for security vulnerabilities"

  - pwsh: |
      $version = ./eng/scripts/get-cli-version.ps1 -CsprojPath "$(Build.SourcesDirectory)/src/Cli/func/Azure.Functions.Cli.csproj"
      Write-Host "CLI version: $version"
      Write-Host "##vso[task.setvariable variable=CliVersion]$version"
    displayName: 'Get CLI version'

  - pwsh: |
      ./eng/scripts/publish-cli-all-rids.ps1 `
        -projectFile 'src\Cli\func\Azure.Functions.Cli.csproj' `
        -outputDirRoot '$(Build.ArtifactStagingDirectory)\artifacts'
    displayName: 'Build & publish CLI'
    env:
      TELEMETRY_INSTRUMENTATION_KEY: $(TELEMETRY_INSTRUMENTATION_KEY)

  - template: /eng/ci/templates/official/steps/sign-authenticode.yml@self
    parameters:
      ridFolders:
        - min.win-arm64
        - min.win-x86
        - min.win-x64
        - linux-x64
        - osx-x64
        - osx-arm64
        - win-x86
        - win-x64
        - win-arm64
      signPatterns: $(authenticodeBinariesToSign)

  - template: /eng/ci/templates/official/steps/sign-thirdparty.yml@self
    parameters:
      ridFolders:
        - min.win-arm64
        - min.win-x86
        - min.win-x64
        - linux-x64
        - osx-x64
        - osx-arm64
        - win-x86
        - win-x64
        - win-arm64
      signPatterns: $(thirdPartyBinariesToSign)

  # - template: /eng/ci/templates/official/steps/sign-mac.yml@self
  #   parameters:
  #     ridFolders:
  #       - osx-x64
  #       - osx-arm64
  #     signPatterns: $(macBinariesToSign)

  - script: |
      python -m pip install -r eng/tools/build-tools/verify-signatures/requirements.txt
      python eng/tools/build-tools/verify-signatures/verify.py --output-dir $(Build.ArtifactStagingDirectory)/artifacts
    displayName: 'Verify signed binaries'

  - pwsh: |
      ./eng/scripts/publish-cli-all-rids.ps1 `
        -projectFile 'src\Cli\func\Azure.Functions.Cli.csproj' `
        -outputDirRoot '$(Build.ArtifactStagingDirectory)\artifacts' `
        -zip true `
        -zipOutputDirRoot '$(Build.ArtifactStagingDirectory)\artifacts-zipped' `
        -noBuild true
    displayName: 'Zip CLI'
    env:
      TELEMETRY_INSTRUMENTATION_KEY: $(TELEMETRY_INSTRUMENTATION_KEY)

  - pwsh: |
        dotnet pack src\Cli\func\Azure.Functions.Cli.csproj `
          -o $(Build.ArtifactStagingDirectory)\artifacts-zipped `
          -c Release `
          -f net8.0 `
          /p:NoWorkers="true"
    displayName: 'Pack CLI for NuGet'

  - template: /eng/ci/templates/official/steps/generate-sign-msi.yml@self

  - pwsh: ./eng/scripts/generateSha.ps1
    displayName: 'Generate sha files'

  - pwsh: |
      Move-Item -Path '$(Build.Repository.LocalPath)/artifacts/Azure.Functions.Cli.*' -Destination '$(Build.ArtifactStagingDirectory)'
      Move-Item -Path '$(Build.Repository.LocalPath)/artifacts/func-cli*.msi' -Destination '$(Build.ArtifactStagingDirectory)'
      Move-Item -Path '$(Build.Repository.LocalPath)/artifacts/Microsoft.Azure.Functions.CoreTools*.nupkg' -Destination '$(Build.ArtifactStagingDirectory)'
      if ($env:IntegrationBuildNumber -like "PreRelease*-*")
      {
          $sourcePath = Join-Path '$(Build.Repository.LocalPath)/artifacts' 'integrationTestsBuildManifest.json'
          Move-Item -Path $sourcePath -Destination '$(Build.ArtifactStagingDirectory)'
      }
    env:
      IntegrationBuildNumber: $(INTEGRATIONBUILDNUMBER)
    displayName: 'Move artifacts'

  - task: 1ES.PublishPipelineArtifact@1
    condition: succeeded()
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'drop'
      artifactType: 'pipeline'

  - pwsh: ./eng/scripts/uploadContentToStorageAccount.ps1 -StorageAccountName $env:IntegrationTestsStorageAccountName -StorageAccountKey $env:IntegrationTestsStorageAccountKey -SourcePath '$(Build.ArtifactStagingDirectory)'
    env:
      IntegrationTestsStorageAccountName: $(IntegrationTestsStorageAccountName)
      IntegrationTestsStorageAccountKey: $(IntegrationTestsStorageAccountKey)
    displayName: 'Upload Core Tools build to the storage account for integration tests'
    condition: eq(variables.IsIntegrationBuild, 'true')
