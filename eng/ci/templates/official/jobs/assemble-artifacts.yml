parameters:
  - name: arch
    type: string
  - name: displayName
    type: string

jobs:
- job: AssembleArtifact${{ parameters.displayName }}
  displayName: "Assemble ${{ parameters.arch }}"
  templateContext:
    inputs:
      - input: pipelineArtifact
        pipeline: core-tools-host
        artifactName: drop-coretools-host-linux-signed
        targetPath: $(Pipeline.Workspace)\core-tools-host
      - input: pipelineArtifact
        pipeline: core-tools-host
        artifactName: drop-coretools-host-windows
        targetPath: $(Pipeline.Workspace)\core-tools-host
      - input: pipelineArtifact
        pipeline: core-tools-inproc
        artifactName: drop-inproc6
        targetPath: $(Pipeline.Workspace)\core-tools-inproc
      - input: pipelineArtifact
        pipeline: core-tools-inproc
        artifactName: drop-inproc8
        targetPath: $(Pipeline.Workspace)\core-tools-inproc
      - input: pipelineArtifact
        pipeline: core-tools-default
        artifactName: drop
        targetPath: $(Pipeline.Workspace)\core-tools-default
  
    outputs:
      - output: pipelineArtifact
        displayName: Publish assembled artifact ${{ parameters.arch }}
        targetPath: $(Build.ArtifactStagingDirectory)
        artifact: drop-${{ parameters.arch }}
      - output: pipelineArtifact
        displayName: Publish metadata.json
        targetPath: $(Pipeline.Workspace)/staging/metadata.json
        artifact: drop-metadata-json
        condition: and(succeeded(), eq('${{ parameters.arch }}', 'min.win-x64'))

  steps:
  - checkout: self
  
  - pwsh: |
      Write-Host "Recursively listing all files in Pipeline.Workspace..."

      $workspacePath = $env:PIPELINE_WORKSPACE
      if (-not $workspacePath) {
          $workspacePath = "$(Pipeline.Workspace)"
      }

      Write-Host "Pipeline Workspace path: $workspacePath"

      function Show-RecursiveContents {
          param (
              [string]$Path,
              [int]$Depth = 0
          )

          $indent = "  " * $Depth
  
          try {
              $items = Get-ChildItem -Path $Path -ErrorAction Stop
      
              foreach ($item in $items) {
                  if ($item.PSIsContainer) {
                      # Directory
                      Write-Host "$indent$($item.FullName) [DIR]"
                      Show-RecursiveContents -Path $item.FullName -Depth ($Depth + 1)
                  } else {
                      # File
                      $sizeKB = [math]::Round($item.Length / 1KB, 2)
                      Write-Host "$indent$($item.FullName) ($sizeKB KB)"
                  }
              }
          } catch {
              Write-Host "$indentError accessing $Path : $($_.Exception.Message)"
          }
      }

      Show-RecursiveContents -Path $workspacePath
    displayName: 'List Pipeline Workspace Contents'
                
  - task: DotNetCoreCLI@2
    displayName: "Run ArtifactAssembler"
    inputs:
      command: run
      projects: "$(Build.SourcesDirectory)/src/Azure.Functions.ArtifactAssembler/Azure.Functions.ArtifactAssembler.csproj"
      arguments: ' -c release "Azure.Functions.Cli.${{ parameters.arch }}"'
      workingDirectory: '$(Pipeline.Workspace)'

  - task: PowerShell@2
    displayName: 'Generate metadata.json file'
    inputs:
      targetType: filePath
      filePath: '$(Build.SourcesDir