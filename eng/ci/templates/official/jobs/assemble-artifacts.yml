parameters:
  - name: arch
    type: string
  - name: displayName
    type: string

jobs:
- job: AssembleArtifact${{ parameters.displayName }}
  displayName: "Assemble ${{ parameters.arch }}"
  templateContext:
    inputs:
      - input: pipelineArtifact
        pipeline: core-tools-host
        artifactName: drop-coretools-host-linux-signed
        targetPath: $(Pipeline.Workspace)/core-tools-host/drop-coretools-host-linux-signed
      - input: pipelineArtifact
        pipeline: core-tools-host
        artifactName: drop-coretools-host-windows
        targetPath: $(Pipeline.Workspace)/core-tools-host/drop-coretools-host-windows
      - input: pipelineArtifact
        pipeline: core-tools-inproc
        artifactName: drop-inproc6
        targetPath: $(Pipeline.Workspace)/core-tools-inproc/drop-inproc6
      - input: pipelineArtifact
        pipeline: core-tools-inproc
        artifactName: drop-inproc8
        targetPath: $(Pipeline.Workspace)/core-tools-inproc/drop-inproc8
      - input: pipelineArtifact
        pipeline: core-tools-default
        artifactName: drop
        targetPath: $(Pipeline.Workspace)/core-tools-default/drop

    outputParentDirectory: $(Build.ArtifactStagingDirectory)
    outputs:
      - output: pipelineArtifact
        displayName: Publish assembled artifact ${{ parameters.arch }}
        targetPath: $(Build.ArtifactStagingDirectory)/core-tools
        artifact: drop-${{ parameters.arch }}
      - output: pipelineArtifact
        displayName: Publish metadata.json
        targetPath: $(Build.ArtifactStagingDirectory)/metadata.json
        artifact: drop-metadata-json
        condition: and(succeeded(), eq('${{ parameters.arch }}', 'min.win-x64'))

  steps:
  - checkout: self

  - task: DotNetCoreCLI@2
    displayName: "Run ArtifactAssembler"
    inputs:
      command: run
      projects: "$(Build.SourcesDirectory)/src/Cli/ArtifactAssembler/Azure.Functions.Cli.ArtifactAssembler.csproj"
      arguments: '-c release -- "Azure.Functions.Cli.${{ parameters.arch }}"'
      workingDirectory: '$(Pipeline.Workspace)'

  - task: PowerShell@2
    displayName: 'List Staging Directory Content'
    inputs:
      targetType: 'inline'
      script: |
        Write-Host "=================================================================="
        Write-Host "Starting recursive listing of staging directory" -ForegroundColor Green
        Write-Host "=================================================================="
        
        $stagingPath = "$(Pipeline.Workspace)/staging"
        
        if (-not (Test-Path $stagingPath)) {
            Write-Host "Error: Directory $stagingPath does not exist!" -ForegroundColor Red
            exit 1
        }
        
        function Format-FileSize {
            param([long]$Size)
            
            if ($Size -ge 1GB) { return "{0:N2} GB" -f ($Size / 1GB) }
            elseif ($Size -ge 1MB) { return "{0:N2} MB" -f ($Size / 1MB) }
            elseif ($Size -ge 1KB) { return "{0:N2} KB" -f ($Size / 1KB) }
            else { return "$Size Bytes" }
        }
        
        function Show-DirectoryContent {
            param(
                [string]$Path,
                [string]$Indent = "",
                [int]$Level = 0
            )
            
            $items = Get-ChildItem -Path $Path -Force
            
            # Process directories first
            foreach ($item in $items | Where-Object { $_.PSIsContainer }) {
                $dirSize = (Get-ChildItem $item.FullName -Recurse -Force -ErrorAction SilentlyContinue | 
                           Measure-Object -Property Length -Sum).Sum
                $formattedSize = Format-FileSize $dirSize
                
                Write-Host "$IndentüìÅ" -NoNewline
                Write-Host " $($item.Name)/" -NoNewline -ForegroundColor Blue
                Write-Host " ($formattedSize)" -ForegroundColor Yellow
                
                # Recursively process subdirectories
                Show-DirectoryContent -Path $item.FullName -Indent "  $Indent" -Level ($Level + 1)
            }
            
            # Then process files
            foreach ($item in $items | Where-Object { -not $_.PSIsContainer }) {
                $formattedSize = Format-FileSize $item.Length
                
                $icon = "üìÑ"
                $color = "White"
                
                # Special formatting based on extension
                switch -Regex ($item.Extension) {
                    '\.dll$' { $icon = "üì¶"; $color = "Green" }
                    '\.exe$' { $icon = "üöÄ"; $color = "Red" }
                    '\.msi$' { $icon = "üì•"; $color = "Red" }
                    '\.json$' { $icon = "üìÑ"; $color = "Yellow" }
                    '\.zip$' { $icon = "üóúÔ∏è"; $color = "Yellow" }
                    '\.sha2$' { $icon = "üîê"; $color = "Cyan" }
                }
                
                Write-Host "$Indent$icon" -NoNewline
                Write-Host " $($item.Name)" -NoNewline -ForegroundColor $color
                Write-Host " ($formattedSize)" -ForegroundColor Yellow
            }
        }
        
        $startTime = Get-Date
        
        # Start listing from the staging directory
        Show-DirectoryContent -Path $stagingPath
        
        $endTime = Get-Date
        $duration = ($endTime - $startTime).TotalSeconds
        
        # Calculate summary values
        $totalDirs = (Get-ChildItem $stagingPath -Recurse -Directory | Measure-Object).Count
        $totalFiles = (Get-ChildItem $stagingPath -Recurse -File | Measure-Object).Count
        $totalSize = (Get-ChildItem $stagingPath -Recurse -File | Measure-Object -Property Length -Sum).Sum
        $totalSizeFormatted = Format-FileSize $totalSize
        
        Write-Host "=================================================================="
        Write-Host "Summary" -ForegroundColor Green
        Write-Host "=================================================================="
        Write-Host "Total directories: $totalDirs" -ForegroundColor Blue
        Write-Host "Total files: $totalFiles" -ForegroundColor Blue
        Write-Host "Total size: $totalSizeFormatted" -ForegroundColor Yellow
        Write-Host "Listing completed in $([math]::Round($duration, 2)) seconds"
        Write-Host "=================================================================="
        
        # Show key directories from the template
        Write-Host "Key directories based on your artifact assembly template:" -ForegroundColor Green
        
        if (Test-Path "$stagingPath/coretools-cli") {
            Write-Host "Core Tools CLI: $(Pipeline.Workspace)/staging/coretools-cli/" -ForegroundColor Blue
        }
        
        if (Test-Path "$stagingPath/coretools-visualstudio") {
            Write-Host "Visual Studio Integration: $(Pipeline.Workspace)/staging/coretools-visualstudio/" -ForegroundColor Blue
        }
        
        if (Test-Path "$stagingPath/metadata.json") {
            Write-Host "Metadata file: $(Pipeline.Workspace)/staging/metadata.json" -ForegroundColor Blue
        }
        
        Write-Host "=================================================================="

  - ${{ if eq(parameters.arch, 'min.win-x64') }}:
    - task: PowerShell@2
      displayName: 'Generate metadata.json file'
      inputs:
        targetType: filePath
        filePath: '$(Build.SourcesDirectory)/eng/scripts/ArtifactAssemblerHelpers/generateMetadataFile.ps1'
        arguments: '-StagingDirectory "$(Pipeline.Workspace)/staging"'
        workingDirectory: '$(Pipeline.Workspace)'

  - ${{ if startsWith(parameters.arch, 'win') }}:
    - task: PowerShell@2
      displayName: 'Generate MSI files'
      inputs:
        targetType: filePath
        filePath: '$(Build.SourcesDirectory)/eng/scripts/ArtifactAssemblerHelpers/generateMsiFiles.ps1'
<<<<<<< HEAD
<<<<<<< HEAD
        arguments: '-ArtifactsPath "$(Pipeline.Workspace)\staging\coretools-cli"'
        workingDirectory: '$(Build.SourcesDirectory)/build'
=======
        arguments: '-ArtifactsPath "$(Pipeline.Workspace)/staging/coretools-cli"'
        workingDirectory: '$(Build.SourcesDirectory)'
>>>>>>> 0a7845fc (specifying msi file)
=======
        arguments: '-ArtifactsPath "$(Pipeline.Workspace)\staging\coretools-cli"'
        workingDirectory: '$(Build.SourcesDirectory)/build'
>>>>>>> 823cc71a (trying agagin)

  - ${{ if startsWith(parameters.arch, 'win-x') }}:
    - template: ci/sign-files.yml@eng
      parameters:
        displayName: Sign MSI files
        folderPath: $(Pipeline.Workspace)/staging/coretools-cli
        pattern: '*.msi'
        signType: 'inline'
        inlineOperation: |
          [
            {
              "KeyCode": "CP-230012",
              "OperationCode": "SigntoolSign",
              "Parameters": {
                "OpusName": "Microsoft",
                "OpusInfo": "http://www.microsoft.com",
                "FileDigest": "/fd \"SHA256\"",
                "PageHash": "/NPH",
                "TimeStamp": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
              },
              "ToolName": "sign",
              "ToolVersion": "1.0"
            },
            {
              "KeyCode": "CP-230012",
              "OperationCode": "SigntoolVerify",
              "Parameters": {},
              "ToolName": "sign",
              "ToolVersion": "1.0"
            }
          ]

  - ${{ if eq(parameters.arch, 'min.win-x64') }}:
    - task: PowerShell@2
      displayName: 'Test Artifacts - Visual Studio'
      inputs:
        targetType: filePath
        filePath: '$(Build.SourcesDirectory)/eng/scripts/ArtifactAssemblerHelpers/testVsArtifacts.ps1'
        arguments: '-StagingDirectory "$(Pipeline.Workspace)/staging/coretools-visualstudio"'

  - ${{ if startsWith(parameters.arch, 'win') }}:
    - task: PowerShell@2
      displayName: 'Test Artifacts'
      inputs:
        targetType: filePath
        filePath: '$(Build.SourcesDirectory)/eng/scripts/ArtifactAssemblerHelpers/testArtifacts.ps1'
        arguments: '-StagingDirectory "$(Pipeline.Workspace)/staging/coretools-cli"'

  - task: DotNetCoreCLI@2
    displayName: 'Zip Artifacts'
    inputs:
      command: run
      projects: '$(Build.SourcesDirectory)/src/Cli/ArtifactAssembler/Azure.Functions.Cli.ArtifactAssembler.csproj'
      arguments: '--no-build -c release -- zip'
      workingDirectory: '$(Pipeline.Workspace)'

  - task: PowerShell@2
    displayName: 'Generate SHA files'
    inputs:
      targetType: filePath
      filePath: '$(Build.SourcesDirectory)/eng/scripts/ArtifactAssemblerHelpers/generateSha.ps1'
      arguments: '-CurrentDirectory "$(Pipeline.Workspace)"'

  - task: CopyFiles@2
    displayName: 'Copy Files to Artifact Staging Directory'
    inputs:
      SourceFolder: '$(Pipeline.Workspace)/staging'
      Contents: 'coretools-*/**'
      TargetFolder: '$(Build.ArtifactStagingDirectory)/core-tools'

  - ${{ if eq(parameters.arch, 'min.win-x64') }}:
    - task: CopyFiles@2
      displayName: 'Copy metadata.json to Artifact Staging Directory'
      inputs:
        SourceFolder: '$(Pipeline.Workspace)/staging'
        Contents: 'metadata.json'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'