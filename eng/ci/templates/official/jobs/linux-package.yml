jobs:
- job: LinuxPackage
  condition: and(ne(variables['LinuxPackageBuildTag'], ''), ne(variables['ConsolidatedBuildId'], ''))
  timeoutInMinutes: "120"
  pool:
    name: 1es-pool-azfunc
    image: 1es-ubuntu-22.04
    os: linux
  steps:
  # Bash v3
  # Run a Bash script on macOS, Linux, or Windows.
  - task: Bash@3
    inputs:
      targetType: 'inline'  # Specify 'filePath' if you want to use an external script file.
      script: |
        cd publish-scripts
        python3 -m venv publish-env
        source publish-env/bin/activate

        pip install -r requirements.txt
        pip install wget
        
        sudo apt-get install fakeroot
        major_version=$(echo "$linuxBuildNumber" | cut -d'.' -f1)
        sudo python driver.py "$linuxBuildNumber" "$consolidatedBuildId" "$major_version"
        sudo python driver.py "$linuxBuildNumber" "$consolidatedBuildId"
        export DEB_PACKAGE="$(readlink -f artifact/*$RELEASE_VERSION*)"
        echo "${DEB_PACKAGE}"
      bashEnvValue: '~/.profile'  # Set value for BASH_ENV environment variable
    env:
      linuxBuildNumber: $(LinuxPackageBuildTag)
      consolidatedBuildId: $(ConsolidatedBuildId)      
  - pwsh: |
      echo $env:LinuxPackageAccountName
      $majorVersion = [math]::Floor([double]$env:LinuxPackageBuildTag.Split(".")[0])
      az storage blob upload -f /mnt/vss/_work/1/s/publish-scripts/artifact/azure-functions-core-tools_$env:LinuxPackageBuildTag-1.deb -c unsigned -n azure-functions-core-tools_$env:LinuxPackageBuildTag-1.deb --account-name $env:LinuxPackageAccountName --account-key $env:LinuxPackageAccountKey
      az storage blob upload -f /mnt/vss/_work/1/s/publish-scripts/artifact/azure-functions-core-tools-$($majorVersion)_$env:LinuxPackageBuildTag-1.deb -c unsigned -n azure-functions-core-tools-$($majorVersion)_$env:LinuxPackageBuildTag-1.deb --account-name $env:LinuxPackageAccountName --account-key $env:LinuxPackageAccountKey
    env:
      LinuxPackageAccountName: $(LinuxPackageAccountName)
      LinuxPackageAccountKey: $(LinuxPackageAccountKey)
      LinuxPackageBuildTag: $(LinuxPackageBuildTag)
    displayName: 'Upload Core Tools Unsigned Linux Package to the storage'
  - template: ci/sign-files.yml@eng
    parameters:
      displayName: 'Sign'
      folderPath: '/mnt/vss/_work/1/s/publish-scripts/artifact'
      pattern: '*.deb'
      signType: inline
      inlineOperation: |
        [
          {
            "keyCode": "CP-450779-Pgp",
            "operationSetCode": "LinuxSign",
            "parameters": [],
            "toolName": "signtool.exe",
            "toolVersion": "1.0"
          }
        ]
  - pwsh: |
      echo $env:LinuxPackageAccountName
      $majorVersion = [math]::Floor([double]$env:LinuxPackageBuildTag.Split(".")[0])
      az storage blob upload -f /mnt/vss/_work/1/s/publish-scripts/artifact/azure-functions-core-tools_$env:LinuxPackageBuildTag-1.deb -c signed -n azure-functions-core-tools_$env:LinuxPackageBuildTag-1.deb --account-name $env:LinuxPackageAccountName --account-key $env:LinuxPackageAccountKey
      az storage blob upload -f /mnt/vss/_work/1/s/publish-scripts/artifact/azure-functions-core-tools-$($majorVersion)_$env:LinuxPackageBuildTag-1.deb -c signed -n azure-functions-core-tools-$($majorVersion)_$env:LinuxPackageBuildTag-1.deb --account-name $env:LinuxPackageAccountName --account-key $env:LinuxPackageAccountKey
    env:
      LinuxPackageAccountName: $(LinuxPackageAccountName)
      LinuxPackageAccountKey: $(LinuxPackageAccountKey)
      LinuxPackageBuildTag: $(LinuxPackageBuildTag)
    displayName: 'Upload Core Tools Signed Linux Package to the storage'
