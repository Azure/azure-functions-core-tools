jobs:
- job: Default
  timeoutInMinutes: "180"
  pool:
    name: 1es-pool-azfunc-public
    image: 1es-windows-2022
    os: windows
  strategy:
    parallel: 5

  variables:
    devops_buildNumber: $[counter(format(''), 1500)]
    DEVOPS_REPO_BRANCH: $[coalesce(variables['System.PullRequest.TargetBranch'], variables['Build.SourceBranchName'])]
    DEVOPS_REPO_COMMIT: $(Build.SourceVersion)
  steps:
  - pwsh: . "tools/start-emulators.ps1" -NoWait
    displayName: "Start emulators (NoWait)"
  - pwsh: |
      $isIntegrationBuild = $false
      if ($env:INTEGRATIONBUILDNUMBER -like "PreRelease*-*")
      {
          $isIntegrationBuild = $true
      }
      Write-Host "##vso[task.setvariable variable=IsIntegrationBuild]$isIntegrationBuild"
      Write-Host "IsIntegrationBuild: $isIntegrationBuild"
    displayName: 'Set IsIntegrationBuild variable'
  - pwsh: |
      Write-Host "Target branch: '$(DEVOPS_REPO_BRANCH)'"
    displayName: Set up environment variables
  - task: NodeTool@0
    inputs:
      versionSpec: '18.x'
  - pwsh: |
      Import-Module ".\pipelineUtilities.psm1" -Force
      Install-Dotnet
    displayName: 'Install .NET 6.0 and 3.1'
  - task: NuGetToolInstaller@1
    inputs:
      versionSpec:
    displayName: Install Nuget tool
  - pwsh: |
      .\validateWorkerVersions.ps1
    displayName: 'Validate worker versions'
    condition: ne(variables['skipWorkerVersionValidation'], 'true')
  - pwsh: |
      Set-Location -Path "./test/Azure.Functions.Cli.Tests"

      # Run dotnet test to list the tests and filter for those matching 'Test_'
      $testsOutput = dotnet test . --list-tests

      Write-Host "Test output: $testsOutput"
      $tests = $testsOutput | ForEach-Object { $_.Trim() } | Select-String -Pattern '^Azure\.Functions\.Cli\.Tests' |  ForEach-Object { $_.Line }

      Write-Host "Value of tests: $tests"

      $tempFile = New-TemporaryFile

      # Write the tests to the temporary file
      $tests | Out-File -FilePath $tempFile -Encoding UTF8

      # Call the create_slicing_filter_condition script with the tests as arguments
      & ../../slice.ps1 -tempTestsFile $tempFile
      Write-Host "Value of targetTestsFilter: $(setFilter.targetTestsFilter)"
      .\build.ps1
    env:
      BuildArtifactsStorage: $(BuildArtifactsStorage)
      IsReleaseBuild: false
      IsPublicBuild: true
      IsCodeqlBuild: false
    displayName: 'Executing build script'
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'VSTest'
      testResultsFiles: '**/*.trx'
      failTaskOnFailedTests: true
    condition: succeededOrFailed()