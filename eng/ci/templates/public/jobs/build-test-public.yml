parameters:
  artifactTargetFramework: ''
  jobTitle: ''

jobs:
- job: ${{ parameters.jobTitle }}
  timeoutInMinutes: "180"
  pool:
    name: 1es-pool-azfunc-public
    image: 1es-windows-2022
    os: windows

  variables:
    devops_buildNumber: $[counter(format(''), 1500)]
    DEVOPS_REPO_BRANCH: $[coalesce(variables['System.PullRequest.TargetBranch'], variables['Build.SourceBranchName'])]
    DEVOPS_REPO_COMMIT: $(Build.SourceVersion)
  steps:
  - pwsh: . "tools/start-emulators.ps1" -NoWait
    displayName: "Start emulators (NoWait)"
  - pwsh: |
      $isIntegrationBuild = $false
      if ($env:INTEGRATIONBUILDNUMBER -like "PreRelease*-*")
      {
          $isIntegrationBuild = $true
      }
      Write-Host "##vso[task.setvariable variable=IsIntegrationBuild]$isIntegrationBuild"
      Write-Host "IsIntegrationBuild: $isIntegrationBuild"
    displayName: 'Set IsIntegrationBuild variable'
  - pwsh: |
      Write-Host "Target branch: '$(DEVOPS_REPO_BRANCH)'"
    displayName: Set up environment variables
  - task: NodeTool@0
    inputs:
      versionSpec: '18.x'
  - pwsh: |
      Import-Module ".\pipelineUtilities.psm1" -Force
      Install-Dotnet
    displayName: 'Install .NET 6.0 and 3.1'
  - task: NuGetToolInstaller@1
    inputs:
      versionSpec:
    displayName: Install Nuget tool
  - pwsh: |
      ls $(Build.SourcesDirectory)
      .\validateWorkerVersions.ps1
    displayName: 'Validate worker versions'
  - task: PowerShell@2
    displayName: "Run Check Vulnerabilities Script"
    inputs:
      filePath: '$(Build.SourcesDirectory)/checkVulnerabilities.ps1'
      workingDirectory: './src/Azure.Functions.Cli'
  - pwsh: |
      .\build.ps1
    env:
      BuildArtifactsStorage: $(BuildArtifactsStorage)
      ArtifactTargetFramework: ${{ parameters.artifactTargetFramework }}
      IsReleaseBuild: false
      IsPublicBuild: true
      IsCodeqlBuild: false
    displayName: 'Executing build script'
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'VSTest'
      testResultsFiles: '**/*.trx'
      failTaskOnFailedTests: true
    condition: succeededOrFailed()