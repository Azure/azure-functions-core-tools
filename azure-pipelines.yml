name: $(Build.SourceBranchName)_$(Build.Reason)_$(devops_buildNumber)

pr:
  branches:
    include:
    - master
    - dev

trigger:
  branches:
    include:
    - dev
    - master

pool:
  vmImage: 'vs2017-win2016'

variables:
  devops_buildNumber: $[counter(format(''), 1500)]
  APPVEYOR_REPO_BRANCH: $[coalesce(variables['System.PullRequest.TargetBranch'], variables['Build.SourceBranchName'])]
  APPVEYOR_REPO_COMMIT: $(Build.SourceVersion)

steps:
- pwsh: |
    Write-Host "Target branch: '$(APPVEYOR_REPO_BRANCH)'"
  displayName: Set up environment variables
- task: NodeTool@0
  inputs:
    versionSpec: '10.x'
- task: NuGetToolInstaller@1
  inputs:
    versionSpec:
  displayName: Install Nuget tool
- task: AzureCLI@2
  displayName: Login via Azure CLI to acquire access token
  inputs:
    azureSubscription: $(E2ETestServiceConnectionName)
    scriptType: ps
    scriptLocation: inlineScript
    inlineScript: |
      # acquire access token from Azure CLI and export it to AZURE_MANAGEMENT_ACCESS_TOKEN
      $accessToken = (az account get-access-token --query "accessToken" | % { $_.Trim('"') })
      echo "##vso[task.setvariable variable=azure_management_access_token]$accessToken"
- pwsh: |
    # Set DotNetPath
    $sdkBasePath = dotnet --info | Where-Object {$_ -match "Base Path"} | ForEach-Object {($_ -replace '\s+Base Path:','').trim()}
    $dotnetPath = Split-Path (Split-Path $sdkBasePath)
    Write-Host "dotnet path: $dotnetPath"
    Write-Host "##vso[task.setvariable variable=DotNetPath]$dotnetPath"
  displayName: 'Set DotNetPath'
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '2.2.207'
    installationPath: $(DotNetPath)
- pwsh: |
    .\build.ps1
  env:
    AzureBlobSigningConnectionString: $(AzureBlobSigningConnectionString)
    BuildArtifactsStorage: $(BuildArtifactsStorage)
    DURABLE_STORAGE_CONNECTION: $(DURABLE_STORAGE_CONNECTION)
    TELEMETRY_INSTRUMENTATION_KEY: $(TELEMETRY_INSTRUMENTATION_KEY)
  displayName: 'Executing build script'
- task: EsrpCodeSigning@1
  displayName: 'Authenticode signing'
  inputs:
    ConnectedServiceName: 'ESRP Service'
    FolderPath: '$(Build.Repository.LocalPath)\artifacts\ToSign\Authenticode\'
    Pattern: '*.dll, *.exe'
    signConfigType: 'inlineSignParams'
    inlineOperation: |
      [    
          {
            "KeyCode": "CP-230012",
            "OperationCode": "SigntoolSign",
            "Parameters": {
              "OpusName": "Microsoft",
              "OpusInfo": "http://www.microsoft.com",
              "FileDigest": "/fd \"SHA256\"",
              "PageHash": "/NPH",
              "TimeStamp": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
            },
            "ToolName": "sign",
            "ToolVersion": "1.0"
          },
          {
            "KeyCode": "CP-230012",
            "OperationCode": "SigntoolVerify",
            "Parameters": {},
            "ToolName": "sign",
            "ToolVersion": "1.0"
          }
      ]
    SessionTimeout: '60'
    MaxConcurrency: '50'
    MaxRetryAttempts: '5'
  condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/release/3.0')))
- task: EsrpCodeSigning@1
  displayName: 'Third party signing'
  inputs:
    ConnectedServiceName: 'ESRP Service'
    FolderPath: '$(Build.Repository.LocalPath)\artifacts\ToSign\ThirdParty\'
    Pattern: '*.dll, *.exe'
    signConfigType: 'inlineSignParams'
    inlineOperation: |
      [
        {
            "KeyCode": "CP-231522",
            "OperationCode": "SigntoolSign",
            "Parameters": {
                "OpusName": "Microsoft",
                "OpusInfo": "http://www.microsoft.com",
                "Append": "/as",
                "FileDigest": "/fd \"SHA256\"",
                "PageHash": "/NPH",
                "TimeStamp": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
            },
            "ToolName": "sign",
            "ToolVersion": "1.0"
        },
        {
            "KeyCode": "CP-231522",
            "OperationCode": "SigntoolVerify",
            "Parameters": {},
            "ToolName": "sign",
            "ToolVersion": "1.0"
        }
      ]
    SessionTimeout: '60'
    MaxConcurrency: '50'
    MaxRetryAttempts: '5'
  condition: and(succeeded(),or (eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/release/3.0')))
- pwsh: |
    .\repackageBinaries.ps1
  displayName: Repackage signed binaries
  env:
    AzureBlobSigningConnectionString: $(AzureBlobSigningConnectionString)
    BuildArtifactsStorage: $(BuildArtifactsStorage)
    DURABLE_STORAGE_CONNECTION: $(DURABLE_STORAGE_CONNECTION)
    TELEMETRY_INSTRUMENTATION_KEY: $(TELEMETRY_INSTRUMENTATION_KEY)
  condition: and(succeeded(),or (eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/release/3.0')))
- task: DotNetCoreCLI@2
  inputs:
    command: 'run'
    workingDirectory: '.\build'
    arguments: 'TestSignedArtifacts --signTest'
  displayName: 'Verify signed binaries'
  condition: and(succeeded(),or (eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/release/3.0')))
- pwsh: |
    .\generateSha.ps1
  displayName: 'Generate sha files'
- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'VSTest'
    testResultsFiles: '**/*.trx'
    failTaskOnFailedTests: true
  condition: succeededOrFailed()
- task: CopyFiles@2
  inputs:
    SourceFolder: '$(Build.Repository.LocalPath)\artifacts'
    Contents: 'Azure.Functions.Cli.*'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
    CleanTargetFolder: true
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'